//
// ray_generation.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_RTCRay__
#define __ISPC_STRUCT_RTCRay__
struct RTCRay {
    float * org_x;
    float * org_y;
    float * org_z;
    float * tnear;
    float * dir_x;
    float * dir_y;
    float * dir_z;
    float * time;
    float * tfar;
    uint32_t * mask;
    uint32_t * id;
    uint32_t * flags;
};
#endif

#ifndef __ISPC_STRUCT_RTCHit__
#define __ISPC_STRUCT_RTCHit__
struct RTCHit {
    float * Ng_x;
    float * Ng_y;
    float * Ng_z;
    float * u;
    float * v;
    uint32_t * primID;
    uint32_t * geomID;
    uint32_t * instID[1];
};
#endif

#ifndef __ISPC_STRUCT_RTCRayHit__
#define __ISPC_STRUCT_RTCRayHit__
struct RTCRayHit {
    struct RTCRay ray;
    struct RTCHit hit;
};
#endif

#ifndef __ISPC_STRUCT_mat44__
#define __ISPC_STRUCT_mat44__
struct mat44 {
    float m[4][4];
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void generate2dXY(float * randoms, const int32_t x, const int32_t xres, const int32_t yres, const float camAspect, const float camScale, float * xOut, float * yOut, float * zOut, const int32_t count);
    extern void generate2dXYTiles(float * randoms, const float x, const float y, float xres, float yres, float camAspect, float camScale, float * xOut, float * yOut, float * zOut, int32_t count);
    extern void rayNormalize(float * origX, float * origY, float * origZ, float * worldX, float * worldY, float * worldZ, float * outX, float * outY, float * outZ, int32_t count);
    extern void raySet(struct RTCRayHit &rays, float posX, float posY, float posZ, float * dirX, float * dirY, float * dirZ, float t, int32_t idx, int32_t count);
    extern void rayTransform(float * x, float * y, float * z, const struct mat44 &matrix, float * outX, float * outY, float * outZ, int32_t count);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
